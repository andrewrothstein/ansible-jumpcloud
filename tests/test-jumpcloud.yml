%YAML 1.2
---
- hosts: local
  connection: local
  gather_facts: no
  tasks:
    - name: Add the instance to the inventory dynamically
      add_host:
        name: "{{ jc_test_ip }}"
        groups: 'jumpcloud'

- hosts: jumpcloud
  vars:
    jumpcloud_install_script_contents: "#!/bin/bash\n\nLOGFILE=\"/opt/jc/jcagentInstall.log\"\nPATH='/sbin:/bin:/usr/sbin:/usr/bin'\n\nagentInstallDir='/opt/jc/'\nclientKeyName='client.key'\nclientCrtName='client.crt'\ncaCrtName='ca.crt'\nconnectKey='2d0cc1d751ca3e5d5964e7eb3baa5979cffca10c'\n\nclientKey=\"$agentInstallDir/$clientKeyName\"\nclientCrt=\"$agentInstallDir/$clientCrtName\"\ncaCrt=\"$agentInstallDir/$caCrtName\"\ninstallScript=\"$agentInstallDir/agentInstall.sh\"\n\njumpCloudCurl=\"$agentInstallDir/bin/jumpcloud-curl\"\n\nproxyFile=\"/etc/jcagent-proxy.conf\"\n\nif [ -r \"${proxyFile}\" ]\nthen\n  export http_proxy=\"`cat ${proxyFile}`\"\n  export https_proxy=\"`cat ${proxyFile}`\"\nfi\n\nfailWithMessage() {\n\techo \"$1\" >&2\n\techo \"$1\" >> $LOGFILE\n\techo \"It appears your agent installation has failed. Please contact support@jumpcloud.com.\" >&2\n\techo \"It appears your agent installation has failed. Please contact support@jumpcloud.com.\" >> $LOGFILE\n\texit 1\n}\n\nprintMessageIfNotZero() {\n  if [ \"$1\" != '0' ]; then\n    echo \"$2\" >&2\n\t  echo \"$2\" >> $LOGFILE\n  fi\n}\nfailIfNotZero() {\n\tif [ \"$1\" != '0' ]; then\n\t\tfailWithMessage \"$2\"\n\tfi\n}\n\nfailIfDoesNotExist() {\n\tif [ ! -e \"$1\" ]; then\n\t\tfailWithMessage \"$2\"\n\tfi\n}\n\nsetTimeIfIncorrect() {\n  local ERRMSG=\"$2\"\n  if [ \"$1\" != '0' ]; then\n    checkFor 'ntpdate'\n    local CMDRES=\"$?\"\n    if [ \"$CMDRES\" != '0' ]; then\n      failWithMessage \"$ERRMSG\"\n    else\n      echo 'Setting local system time using ntpdate and pool.ntp.org...' | tee -a $LOGFILE\n      ntpdate -u pool.ntp.org\n      localTime=\"$(date +%s)\"\n      curlAgentWithoutCerts --data \"time=$localTime\" \"$timeUrl\"\n      local CURLRES=\"$?\"\n      printMessageIfNotZero \"$CURLRES\" \"Problem setting time with ntpdate\"\n      failIfNotZero \"$CURLRES\" \"$ERRMSG\"\n    fi\n  fi\n}\ncheckFor() {\n\ttype \"$1\" >/dev/null 2>&1\n}\n\nfailIfCommandNotFound() {\n\tcheckFor \"$1\"\n\tfailIfNotZero \"$?\" \"Necessary command not found: '$1'\"\n}\n\ncurlAgentWithoutCerts() {\n\tattempts=3\n  delay=3\n\tn=0\n\tuntil $jumpCloudCurl --silent --show-error --fail --connect-key \"$connectKey\" \"$@\"; do\n\t\tret=$?\n\t\tn=$[$n+1]\n\t\tif [ \"$n\" -ge \"$attempts\" ]; then\n\t\t\techo \"Failed curl ($n of $attempts), quitting ...\"\n\t\t\treturn $ret\n\t\telse\n\t\t\techo \"Failed curl ($n of $attempts), retrying after delay ...\"\n\t\t\tsleep $delay\n\t\tfi\n\tdone\n\treturn $?\n}\n\ncurlAgent() {\n\tcurlAgentWithoutCerts --cert \"$clientCrt\" --key \"$clientKey\" --cacert \"$caCrt\" \"$@\"\n}\n\nprogress(){\n  while true\n  do\n    echo -n \".\"\n    sleep 1\n  done\n}\n\nfunction killsub()\n{\n    kill -9 ${1} 2>/dev/null\n    wait ${1} 2>/dev/null\n}\n\nfailIfCommandNotFound id\nif [ \"$(id -u)\" != '0' ]; then\n\tfailWithMessage 'Script must be run as root (or with sudo)'\nfi\n\nfailIfCommandNotFound mkdir\nfailIfCommandNotFound chmod\nmkdir -p \"$agentInstallDir/bin\"\nchmod 700 \"$agentInstallDir\"\n\npublicUrlBase='https://kickstart.jumpcloud.com'\nprivateUrlBase='https://private-kickstart.jumpcloud.com'\n\ndetectUrl=\"$publicUrlBase/Detect\"\ntimeUrl=\"$publicUrlBase/Time\"\nsignUrl=\"$publicUrlBase/SignCsr\"\ncheckUrl=\"$privateUrlBase/CheckAccess\"\ninstallUrl=\"$privateUrlBase/GetAgentInstall\"\n\njumpCloudCurlUrl=\"https://s3.amazonaws.com/jumpcloud-windows-agent/tools/linux_386/jumpcloud-curl\"\n\ntemplateFile=\"$agentInstallDir/templateId\"\nclientCsr=\"$agentInstallDir/client.csr\"\n\nif grep -q Debian /etc/issue; then # force curl uuid-runtime install for debian\n  apt-get install curl uuid-runtime -y\nfi\n\necho 'Checking for necessary install commands...'\necho 'Checking for necessary install commands...' >> $LOGFILE # repeated because we haven't confirmed tee is installed\nnotFoundCommands=''\nfor command in bash cat date grep head openssl rm uname uuidgen tee; do\n\tcheckFor \"$command\"\n\tif [ \"$?\" != '0' ]; then\n\t\tnotFoundCommands=\"$notFoundCommands $command\"\n\tfi\ndone\nif [ -n \"$notFoundCommands\" ]; then\n\tfailWithMessage \"Missing necessary install commands: $notFoundCommands\"\nelse\n\techo 'Necessary install commands found' | tee -a $LOGFILE\nfi\n\necho 'Fetching jumpcloud-curl'\ncurl --silent --show-error --fail --output \"$jumpCloudCurl\" \"$jumpCloudCurlUrl\"\nfailIfNotZero \"$?\" 'Problem downloading JumpCloud curl'\nchmod 700 \"$jumpCloudCurl\"\n\necho 'Checking system compatibility...' | tee -a $LOGFILE\narch=\"$(uname -m)\"\nif [ -f /etc/system-release ]; then\n\tos=\"$(head -n 1 /etc/system-release)\"\nelse\n\tos=\"$(head -n 1 /etc/issue)\"\nfi\ncurlAgentWithoutCerts --data \"arch=$arch&os=$os\" --output \"$templateFile\" \"$detectUrl\"\nif [ \"$?\" != '0' ] || [ ! -f \"$templateFile\" ]; then\n    failWithMessage \"Your OS/architecture [$os/$arch] is not supported. Please visit http://support.jumpcloud.com/knowledgebase/articles/423848-supported-os-versions for a list of supported systems.\"\nfi\necho 'System is supported' | tee -a $LOGFILE\ntemplateId=\"$(cat \"$templateFile\")\"\nrm -f \"$templateFile\"\n\necho 'Checking local system time...' | tee -a $LOGFILE\nlocalTime=\"$(date +%s)\"\ncurlAgentWithoutCerts --data \"time=$localTime\" \"$timeUrl\"\nsetTimeIfIncorrect \"$?\" \"Your system time seems inaccurate. Please ensure your system is set to the correct time by running ntpdate ('ntpdate -u pool.ntp.org') or verifying that ntpd is configured properly.\"\nlocalTime=\"$(date +%s)\"\necho 'System time is accurate' | tee -a $LOGFILE\n\necho 'Generating private key...' | tee -a $LOGFILE\nopenssl genrsa -out \"$clientKey\" 2048\nfailIfNotZero \"$?\" 'Problem generating private key'\nfailIfDoesNotExist \"$clientKey\" 'Problem generating private key'\necho 'Successfully generated private key' | tee -a $LOGFILE\nchmod 600 \"$clientKey\"\n\necho 'Generating certificate signing request...' | tee -a $LOGFILE\ncertuuid=\"$(uuidgen)\"\nopenssl req -new -subj \"/CN=$certuuid/O=JumpCloud\" -key \"$clientKey\" -out \"$clientCsr\" -nodes -batch -sha1\nfailIfNotZero \"$?\" 'Problem generating certificate signing request'\nfailIfDoesNotExist \"$clientCsr\" 'Problem generating certificate signing request'\necho 'Successfully generated certificate signing request' | tee -a $LOGFILE\n\necho 'Fetching signed certificate...' | tee -a $LOGFILE\ncurlAgentWithoutCerts --form \"csr=@$clientCsr\" --form \"certuuid=$certuuid\" --output \"$clientCrt\" \"$signUrl\"\nfailIfNotZero \"$?\" 'Problem fetching signed certificate'\nfailIfDoesNotExist \"$clientCrt\" 'Problem fetching signed certificate'\necho 'Successfully fetched signed certificate' | tee -a $LOGFILE\nchmod 600 \"$clientCrt\"\nrm -f \"$clientCsr\"\n\ncat >\"$caCrt\" <<END_OF_CA\n-----BEGIN CERTIFICATE-----\nMIIEpTCCAo2gAwIBAgIJAMfV46dMgC/IMA0GCSqGSIb3DQEBBQUAMD0xJDAiBgNV\nBAMMG1Byb2RSb290Q0Euc2FmZWluc3RhbmNlLmNvbTEVMBMGA1UECgwMU2FmZUlu\nc3RhbmNlMB4XDTEyMTEzMDE3MzEyN1oXDTE3MTEyOTE3MzEyN1owRTEsMCoGA1UE\nAwwjUHJvZFNlcnZlcklzc3VlckNBLnNhZmVpbnN0YW5jZS5jb20xFTATBgNVBAoM\nDFNhZmVJbnN0YW5jZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMQI\n+cbjs/oEwdLNzF280rRbmLWyubF8bc9iZBE4Np2iuhcCPAR0TUehsGafaaPdJ8q7\nzuZ8ZYDf1H7WLiXeGDHjZhWK2h8uQfNltFTwUCOKJCdayGMQF8ns8YqKZfqPBRd7\nKKS5hHDEdptvcC5WrepoLxyDyU0qyviKuiAT28+PNQpnIV8RGsyFzQWWrGeRSUKI\n0iz6LqvHpPcTg7PrmcIPRvDWuVhjqsJGiX6oUdSOZvMyXzYV3pofzLtUcVUvDHLr\nVt+Ez5Kh73sk9oi+vv+kBP+4zItlCc0JSXEo+jGG7h4v1jSNNDxeEtNOQ7TYoaJz\naq5Ni7POvq+t/OtpnnECAwEAAaOBnzCBnDAMBgNVHRMEBTADAQH/MB0GA1UdDgQW\nBBRqTYKPb2II4GXLmFGKy36PZvaRcjBtBgNVHSMEZjBkgBRGr28P6uqQ5AsThMqh\nwgok5w89MKFBpD8wPTEkMCIGA1UEAwwbUHJvZFJvb3RDQS5zYWZlaW5zdGFuY2Uu\nY29tMRUwEwYDVQQKDAxTYWZlSW5zdGFuY2WCCQDi3GG5EBn20DANBgkqhkiG9w0B\nAQUFAAOCAgEAD7Q9/Dp5hzqRW258DfGuFWlX9LY+vcD5oKxjqMX1Di4YmhIn9baU\npN1Ocs9kp988Ez8nZIHID4QHnk99Uy/mmqGpeI4ht/wEuLbUHMhYlpKhg7UellRJ\ngGflioehkt6IrghHVDIt2DUb96dCwrkED6MAozQ8dNc/wLaNP47FptS+wV1C00nf\nQ9qZ/kHu9f7tjQBWVfIrDOdFdw1e7R4nE4pCwpOI/MUzEj2rMvLd9b3pXFDxxtfs\nOr4inEDnY2+XISRUFRPOim1BHdSa7sZwCcascmH3ZDaMqdU2fTJ5UrHGIH3X+/4+\ne9V6hPTUZDEvMShAuPWn8mmJDMcQuBcN0sx69H+rFZVdYekoIW3z0crOemMLHGgp\nFNHE4a+lqwzXW/4+6FNjkeGbyrvMqD5A/wSGB4G+tCHZikyuRGZhQ3sVGjFlE6sq\nJji55KlPwQlp76OQf/6jnIgAbNUI5osaVUDrvEu9I3F7FCgNwoNHmXYr047CEi4t\n1QvggncMLVSWQM25LswThLPpd/Cp9k5Mh19RIOZoBIb2lpyKFkuUw/UjLkzJEJSH\nhoUi9iTxg7YYKYo3hxj6EoIyAHUuZEAnHqg8OoTAQI8y4Udt67+9GvLfqUzC3evR\n89cBFQBF7yfqbLfD6rUBdZwLWBJsXu8pMdfZe+zic9ztcnx4vBX8fKs=\n-----END CERTIFICATE-----\n\n-----BEGIN CERTIFICATE-----\nMIIFnTCCA4WgAwIBAgIJAOLcYbkQGfbQMA0GCSqGSIb3DQEBBQUAMD0xJDAiBgNV\nBAMMG1Byb2RSb290Q0Euc2FmZWluc3RhbmNlLmNvbTEVMBMGA1UECgwMU2FmZUlu\nc3RhbmNlMB4XDTEyMTEzMDE3MzAwOVoXDTIyMTEyODE3MzAwOVowPTEkMCIGA1UE\nAwwbUHJvZFJvb3RDQS5zYWZlaW5zdGFuY2UuY29tMRUwEwYDVQQKDAxTYWZlSW5z\ndGFuY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC99EZwH/pmOzd4\n2WTpQ1K4WAJcLS1fyBhov54JrXGtWVj1V8/tTe2ZTgnecvJLxwmJ4aZ5mYeixkci\ncSrohsl0nR5Y6hNBXiL+JVEmg5b5NoMvg5mLLI2CeWhzp434wUY+YV9yXrkxA8N6\nRCJOqJFQuLPCGrFenNz8ynlZ5Op8o/jhDln2Sv/+bjc0dGRH5Dn0jQD97rOvdO8L\nKt1fHqK+WTqdC64j8eSgSaTJKVtGjRh8P3xQ6MCG0HJMrc9YftbaeDujczTgNL3p\nAiR1aZLMV8mQhcB9YLr07uhJMsKMsp2s5DSTvyQnUWOEjikRZFEYBtsc46gzYpo8\n8HSIFq78OIxEi9gKBTaz3b+GCB+fxES+44Ax66lzdV6X8xEl8z1uCDygXq0/9VHC\n3aSb7bqLPlASD5tr2qvfQuc3LZDsyCf1IkXJLl+luraeXJhkoR08UqmruS79qz9S\nGmM/hl6z5q7WEW0bRqbRQ6kZozAhBaFM/0jkUnxNyL8eKiZSfmvQoYY0LILmEW85\n8KNNvuxl8ptPm3jnPafBGPfjh3uFqq7ZTmMj0O8O0m7wYoZTpCFIhoDAHJvYaLFg\nA8Vulv9v5Vy0KsY+Qh4OVL599nUyvS7ZJdtJIYiqED4IBVfnECDfU90drZZjv16W\nT48RBvpcvGWQRRqRnWSxtabThcmg/wIDAQABo4GfMIGcMAwGA1UdEwQFMAMBAf8w\nHQYDVR0OBBYEFEavbw/q6pDkCxOEyqHCCiTnDz0wMG0GA1UdIwRmMGSAFEavbw/q\n6pDkCxOEyqHCCiTnDz0woUGkPzA9MSQwIgYDVQQDDBtQcm9kUm9vdENBLnNhZmVp\nbnN0YW5jZS5jb20xFTATBgNVBAoMDFNhZmVJbnN0YW5jZYIJAOLcYbkQGfbQMA0G\nCSqGSIb3DQEBBQUAA4ICAQCWONaWzTOoIlw5zNtWGZCDWOrix5/KXrbnek8Y5u39\nkLf3Wp1drWIDePxOQBF5Nyvm+aucnkvHmlNX74545zgYKweCDYSnAhID0qpjqxaz\n8GYSxJ2d6bxqbnFo3gw8VZDqQ4+ruqPlraFEtuePAS8S7lSXfzr0r6Ob74p1Rp59\nh0w3+cdW97XSFBzxLcT9jNmpICzFnB2GqRmR8a1Nl5ejgSz0RxEeHE1oi9KoOCAW\n7E4vO7+9zJ6Z3DHHGyEG6CdUQlyPBLjaHUCzdjpGrRd16XzxNHu8I9M3KS3gDAXr\nwiSaZGmqhXTI7XJRMtpVPhzc0XOpm7GvWVm4sbL1/lBSrmb7Eqs0Fj1J2A3F+pK7\nFuKNWXSS6kDmV191d5NG5zcRugQeGQhKZ4v8y0L5L6OoXlneMAE1O/tz8W2x++rV\nMBDbPcCA0OzzMN/b9ySdc7J2Mn2rHR5HQ+yN7fqDFAXpJxuK3mRb83iszimk+K44\nub45ruuFbcYfgLjPpamLneGNvZM1r1DcuJBcHi94DoetRL6txpMtmvgN2UoHcXlv\nLJcoqIUKhsV94UQZ0Bb5C4HGdq0B/qKv5rCCW/t5PJqcvgNV+XsMGGb/2A2xAjV6\nkC3iATf2LLcvHi/gnQ5sDtxaQOhMU0kmFJpsfQ/0fDN53eQhxN/RSH015ojOeSHY\nvg==\n-----END CERTIFICATE-----\n\nEND_OF_CA\nchmod 600 \"$caCrt\"\n\necho 'Verifying certificate access...' | tee -a $LOGFILE\ncurlAgent \"$checkUrl\"\nfailIfNotZero \"$?\" 'Problem verifying certificate access'\necho 'Successfully verified certificate access' | tee -a $LOGFILE\n\necho 'Fetching second stage installer...' | tee -a $LOGFILE\ncurlAgent --data \"templateId=$templateId&certuuid=$certuuid\" --output \"$installScript\" \"$installUrl\"\nfailIfNotZero \"$?\" 'Problem fetching second stage installer'\nfailIfDoesNotExist \"$installScript\" 'Problem fetching second stage installer'\necho 'Successfully fetched second stage installer' | tee -a $LOGFILE\n\necho 'Executing second stage installer...' | tee -a $LOGFILE\nbash \"$installScript\"\n"
  roles:
    - { role: ../../ }
...
